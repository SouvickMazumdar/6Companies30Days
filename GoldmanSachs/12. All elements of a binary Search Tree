//https://leetcode.com/problems/all-elements-in-two-binary-search-trees/solutions/3026574/easy-and-simple/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode *root,vector<int>&ar)
    {
        if(root==NULL)return;
        dfs(root->left,ar);
        ar.push_back(root->val);
        dfs(root->right,ar);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int>ar,br;
        dfs(root1,ar);dfs(root2,br);
        int i=0,j=0;
        vector<int>kr;
        while(i<ar.size() && j<br.size())
        {
            if(ar[i]<=br[j])
            kr.push_back(ar[i++]);
            else
            kr.push_back(br[j++]);
        }
        while(i<ar.size())
        kr.push_back(ar[i++]);
        while(j<br.size())
        kr.push_back(br[j++]);
        return kr;
        
    }
};
