//https://leetcode.com/problems/closest-prime-numbers-in-range/solutions/3069215/sieve-of-eratosthenes-cpp/

class Solution {
public:
// int isPrime(int a)
//     {
//         int i=2;
//         if(a==1)return 0;
//         while(i<=sqrt(a))
//         {
//             if(a%i==0)return 0;i++;
//         }   
//         return 1;
//     }
    vector<int> closestPrimes(int left, int right) {
        //   int first=0,second=0,ans1=0,ans2=0,mini=INT_MAX;
        // for(int i=left;i<=right;i++)
        // {   
        //    if(isPrime(i))
        //    {
        //        //cout<<"j";
        //        if(first==0)first=i;
        //        else if(first!=0 && second==0)second=i;
        //        if(first!=0 && second!=0 )
        //        {
        //            int d=second-first;
        //            if(mini>d)
        //            {
        //                mini=d;
        //                ans1=first;
        //                ans2=second;
        //            }
        //            first=second;
        //            second=0;
        //        }
        //    }
        // }
        // if(ans1==0||ans2==0)
        // return {-1,-1};
        // else
        // return {ans1,ans2};
        
        vector<int>sieve(right+1,1);
        for(int i=2;i*i<=right;i++)
        {
            if(sieve[i])
            {
                for(int j=i*i;j<=right;j+=i)
                {
                    if(j%i==0 && sieve[j]==1)sieve[j]=0;
                }
            }
        }

        int mini=INT_MAX;int first=0,second=0,ans1=0,ans2=0;
        for(int i=left;i<=right;i++)
        {
            if(sieve[i] && i!=1)
            {
                if(first==0)first=i;
               else if(first!=0 && second==0)second=i;
               if(first!=0 && second!=0 )
               {
                   int d=second-first;
                   if(mini>d)
                   {
                       mini=d;
                       ans1=first;
                       ans2=second;
                   }
                   first=second;
                   second=0;
               }
            }
        }
        if(ans1==0||ans2==0)
        return {-1,-1};
        else
        return {ans1,ans2};
    }
};
