/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
// https://leetcode.com/problems/find-in-mountain-array/
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int k=peakIndexInMountainArray(mountainArr);
        int firstTry=orderAgnosticArray(mountainArr,target,0,k);
        if(firstTry!=-1)
            return firstTry;
        return orderAgnosticArray(mountainArr,target,k+1,mountainArr.length()-1);
        
    }
      public int peakIndexInMountainArray(MountainArray arr) {
        int start=0,end=arr.length()-1;
        while(start<end)
        {
            int mid=start+(end-start)/2;
            if(arr.get(mid)>arr.get(mid+1))
            {
                end=mid;
            }
            else if(arr.get(mid)<arr.get(mid+1))
            {
                start=mid+1;
            }
        }
        return end;
    }
    public int orderAgnosticArray(MountainArray A,int target,int start,int end)
    {
        
        boolean n=false;int ans=-1;
        if(A.get(start)<A.get(end))
            n=true;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(target==A.get(mid))
            {
                return mid;
            }
            else if(n)
            {
                if(target<A.get(mid))
                    end=mid-1;
                else
                    start=mid+1;
            }
            else
            {
                if(target<A.get(mid))
                    start=mid+1;
                else
                    end=mid-1;

                
            }
        }
           return ans;
    }
}
